name: release
on:
  push:
    branches:
      - master
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.3
      - uses: gittools/actions/gitversion/setup@v0.9.10
        with:
          versionSpec: 5.7.0
      - id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.10
      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
#      - name: tag release
#        run: |
#          git tag ${{ steps.gitversion.outputs.semVer }}
#          git push origin ${{ steps.gitversion.outputs.semVer }}
      - name: VERSION file
        run: |
          echo "${{ steps.gitversion.outputs.semVer }}" > example_server/VERSION
      - name: build deps
        run: |
          python3 -m pip install --upgrade build
      - name: build Python package
        run: |
          cd example_server
          python3 -m build --sdist
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}


      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./example_server
          file: ./example_server/Dockerfile
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/example_server:${{ steps.gitversion.outputs.semVer }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/example_server:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Update chart version in the related HelmChart Charts.yaml
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: 'charts/example_server/Chart.yaml'
          propertyPath: 'version'
          value: ${{ steps.gitversion.outputs.semVer }}
          createPR: false
          commitChange: false
          updateFile: true
          message: 'Update chart version to ${{ steps.image.outputs.version }}'
      - name: Update appVersion in the related HelmChart Charts.yaml
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: 'charts/example_server/Chart.yaml'
          propertyPath: 'appVersion'
          value: "${{ steps.gitversion.outputs.semVer }}"
          createPR: false
          commitChange: false
          updateFile: true
          message: 'Update appVersion to ${{ steps.image.outputs.version }}'

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.6.3

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.2.1
        with:
          config: cr.yaml
#          charts_dir: charts
#          charts_repo_url: https://balihb.github.io/helm-charts/helm-chart-experiment
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
#      - uses: ncipollo/release-action@v1
#        with:
#          artifacts: "example_server/dist/*.tar.gz"
#          tag: ${{ steps.gitversion.outputs.semVer }}
#          commit: ${{ github.ref }}
#          token: ${{ secrets.GITHUB_TOKEN }}
